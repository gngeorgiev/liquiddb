{"version":3,"sources":["index.browser.ts","LiquidDb.ts","Socket.ts","ClientData.ts","EventData.ts","log.ts","Reference.ts"],"names":[],"mappings":"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","file":"","sourcesContent":["import { LiquidDb } from './LiquidDb';\nLiquidDb.initializeShims({ webSocket: WebSocket });\n\nexport * from './LiquidDb';\n","import { Socket } from './Socket';\nimport { Reference } from './Reference';\nimport { ClientOperationDelete, ClientOperationSet } from './ClientData';\nimport { OperationEventData, EventOperation } from './EventData';\nimport { configure, LogLevel } from './log';\n\nexport interface DbSettings {\n    address?: string;\n}\n\nexport interface Shims {\n    webSocket?: typeof WebSocket;\n}\n\nexport class LiquidDb {\n    private socket: Socket;\n    private static shims: Shims;\n\n    constructor(\n        private settings: DbSettings = {\n            address: 'ws://localhost:8082/db'\n        }\n    ) {}\n\n    static initializeShims(shims: Shims) {\n        LiquidDb.shims = shims;\n    }\n\n    static configureLogger(conf: { level: LogLevel }) {\n        configure(conf);\n    }\n\n    static LogLevel: typeof LogLevel = LogLevel;\n\n    initialize(): Promise<LiquidDb> {\n        this.socket = new Socket(\n            this.settings.address,\n            LiquidDb.shims.webSocket\n        );\n\n        return new Promise(resolve => {\n            if (this.socket.ready) {\n                return resolve(this);\n            }\n\n            this.socket.once('ready', () => resolve(this));\n        });\n    }\n\n    close() {\n        this.socket.close();\n    }\n\n    ref(path: string | string[]): Reference {\n        if (!path) {\n            throw new Error(\n                'Invalid ref path, must be in the format \"foo.bar\" or [\"foo\", \"bar\"].'\n            );\n        }\n\n        if (typeof path === 'string') {\n            path = path.split('.');\n        }\n\n        //we should not create a reference with empty path since it can delete the whole tree\n        if (!path.length) {\n            throw new Error('Invalid ref path, must have at least one level.');\n        }\n\n        return new Reference(path, this.socket);\n    }\n\n    delete(path: string[]): Promise<OperationEventData> {\n        return new Reference([], this.socket).delete();\n    }\n\n    set(data: any): Promise<OperationEventData> {\n        return new Reference([], this.socket).set(data);\n    }\n\n    value() {\n        return new Reference([], this.socket).value();\n    }\n\n    data(callback: (data: OperationEventData) => any) {\n        return new Reference([], this.socket).data(callback);\n    }\n\n    on(op: EventOperation, callback: (data: OperationEventData) => any) {\n        return new Reference([], this.socket).on(op, callback);\n    }\n\n    once(op: EventOperation, callback: (data: OperationEventData) => any) {\n        return new Reference([], this.socket).once(op, callback);\n    }\n}\n","import { EventEmitter } from 'events';\nimport * as MersenneTwister from 'mersenne-twister';\nimport { utc, Moment } from 'moment';\n\nimport { SocketEvent } from './SocketEvent';\nimport {\n    ClientData,\n    ClientOperationSubscribe,\n    ClientOperationUnSubscribe\n} from './ClientData';\nimport {\n    BaseEventData,\n    EventOperation,\n    OperationEventData,\n    HearthbeatEventData,\n    EventOperationHearthbeat\n} from './EventData';\n\nimport { logger } from './log';\n\nconst log = logger('Socket');\nconst javascriptUnixTimeLength = 13;\n\nexport class Socket extends EventEmitter {\n    private socketOpen: boolean;\n    private receivedHearthbeat: boolean;\n\n    private generator: MersenneTwister = new MersenneTwister();\n    private events: Map<number, SocketEvent> = new Map();\n\n    private serverTime: Moment;\n    private lastLocalTimeUpdate: Moment;\n\n    private ws: WebSocket;\n\n    get ready(): boolean {\n        return this.socketOpen && this.receivedHearthbeat;\n    }\n\n    constructor(private address: string, websocket: typeof WebSocket) {\n        super();\n        this.initWebSocket(websocket);\n    }\n\n    private initWebSocket(webSocket: typeof WebSocket) {\n        this.ws = new webSocket(this.address);\n        this.ws.onclose = this.onSocketClose.bind(this);\n        this.ws.onerror = this.onSocketError.bind(this);\n        this.ws.onopen = this.onSocketOpen.bind(this);\n        this.ws.onmessage = this.onSocketMessage.bind(this);\n    }\n\n    private onSocketClose() {\n        this.socketOpen = false;\n        this.receivedHearthbeat = false;\n    }\n\n    private onSocketError(error) {\n        log.fatal(error);\n        this.onSocketClose();\n    }\n\n    private onSocketOpen() {\n        this.socketOpen = true;\n    }\n\n    private onSocketMessage(msg: MessageEvent) {\n        const data: BaseEventData = JSON.parse(msg.data);\n        if (data.operation === EventOperationHearthbeat) {\n            this.processHearthbeatEventData(data as HearthbeatEventData);\n        } else {\n            this.processOperationEventData(data as OperationEventData);\n        }\n    }\n\n    private processOperationEventData(data: OperationEventData) {\n        //TODO: make sure that subscribers without id should receive id based messages as well\n        //so far, I think they should\n        log.debug(`-OnOperationSocketMessage-`);\n        log.debug(`Event Data: ${JSON.stringify(data)}`);\n        log.debug(\n            `Events: ${JSON.stringify(Object.keys((<any>this)._events))}`\n        );\n\n        const events = [\n            this.buildEventPath(data.path, data.operation, 0),\n            this.buildEventPath(data.path, data.operation, data.id),\n            this.buildEventPath([], data.operation, 0),\n            this.buildEventPath([], data.operation, data.id)\n        ];\n\n        events.forEach(ev => this.emit(ev, data));\n    }\n\n    private processHearthbeatEventData(data: HearthbeatEventData) {\n        log.debug(`-OnHearthbeatSocketMessage-`);\n        log.debug(`Hearthbeat: ${JSON.stringify(data)}`);\n\n        if (!this.receivedHearthbeat) {\n            this.receivedHearthbeat = true;\n            this.lastLocalTimeUpdate = utc();\n\n            this.emit('ready');\n        }\n\n        this.serverTime = utc(data.timestamp);\n    }\n\n    private reconnect() {}\n\n    private buildEventPath(path: string[], op: EventOperation, id: number) {\n        const parts = [op || null, id ? String(id) : null].filter(a => a);\n        return path.concat(parts).join('.');\n    }\n\n    private unsubscribeImpl(socketEvent: SocketEvent) {\n        const { path, event, operation, id, callback } = socketEvent;\n\n        this.removeListener(event, callback);\n        this.send({\n            id,\n            path,\n            operation: ClientOperationUnSubscribe,\n            value: operation\n        });\n\n        this.events.delete(id);\n    }\n\n    private subscribeImp(\n        path: string[],\n        op: EventOperation,\n        callback: (data: OperationEventData) => any,\n        id: number\n    ): SocketEvent {\n        const evPath = this.buildEventPath(path, op, id);\n        this.on(evPath, callback);\n\n        this.send({\n            path,\n            id: id,\n            operation: ClientOperationSubscribe,\n            value: op\n        });\n\n        const event = {\n            event: evPath,\n            path,\n            operation: op,\n            callback,\n            id\n        };\n\n        this.events.set(id, event);\n\n        return event;\n    }\n\n    private updateServerTimeWithDelta() {\n        //we save the server time on each hearthbeat, then on each message we gotta\n        //update the serverTime with the delta of the passed time since the last message\n        const lastUpdate = this.lastLocalTimeUpdate;\n        const currentUpdate = utc();\n        const delta = currentUpdate.diff(lastUpdate);\n\n        this.lastLocalTimeUpdate = currentUpdate;\n\n        this.serverTime = this.serverTime.add(delta, 'milliseconds');\n    }\n\n    private ensureClientDataFields(data: ClientData) {\n        data.id = data.id || this.generator.random_int();\n        data.timestamp = data.timestamp || this.serverTime.toISOString();\n    }\n\n    close() {\n        this.ws.close();\n        for (let event of this.events.values()) {\n            this.unsubscribeImpl(event);\n        }\n    }\n\n    sendWait(\n        data: ClientData,\n        path: string[],\n        operations: EventOperation | EventOperation[]\n    ): Promise<OperationEventData> {\n        return new Promise(resolve => {\n            //we need to save the id, so we are generating it manually\n            const id = this.generator.random_int();\n\n            this.subscribeOnce(path, operations, id, data => {\n                resolve(data);\n            });\n\n            data.id = id;\n            this.send(data);\n        });\n    }\n\n    send(data: ClientData): number {\n        this.updateServerTimeWithDelta();\n        this.ensureClientDataFields(data);\n\n        const d = JSON.stringify(data);\n        this.ws.send(d);\n\n        log.debug('-Send message-');\n        log.debug(`Message: ${d}`);\n\n        return data.id;\n    }\n\n    subscribeOnce(\n        path: string[],\n        operations: EventOperation | EventOperation[],\n        id: number,\n        callback: (data: OperationEventData) => any\n    ) {\n        const off = this.subscribe(path, operations, id, data => {\n            off();\n            callback(data);\n        });\n    }\n\n    subscribe(\n        path: string[],\n        operations: EventOperation | EventOperation[],\n        id: number,\n        callback: (data: OperationEventData) => any,\n        once?: boolean\n    ): () => any {\n        if (!Array.isArray(operations)) {\n            operations = [operations];\n        }\n\n        const events = operations.map(op =>\n            this.subscribeImp(path, op, callback, id)\n        );\n\n        return () =>\n            events.forEach(ev => {\n                this.unsubscribeImpl(ev);\n            });\n    }\n}\n","export const ClientOperationSet = 'set';\nexport const ClientOperationGet = 'get';\nexport const ClientOperationDelete = 'delete';\nexport const ClientOperationSubscribe = 'subscribe';\nexport const ClientOperationUnSubscribe = 'unsubscribe';\n\nexport type ClientOperation =\n    | 'set'\n    | 'get'\n    | 'delete'\n    | 'subscribe'\n    | 'unsubscribe';\n\nexport interface ClientData {\n    id?: number;\n    timestamp?: string;\n    operation: ClientOperation;\n    path?: string[];\n    value?: any;\n}\n","export const EventOperationInsert = 'insert';\nexport const EventOperationDelete = 'delete';\nexport const EventOperationUpdate = 'update';\nexport const EventOperationGet = 'get';\nexport const EventOperationHearthbeat = 'hearthbeat';\nexport type EventOperation =\n    | 'insert'\n    | 'delete'\n    | 'update'\n    | 'get'\n    | 'hearthbeat';\n\nexport interface BaseEventData {\n    id?: number;\n    operation: EventOperation;\n}\n\nexport interface OperationEventData extends BaseEventData {\n    path: string[];\n    key: string;\n    value: any;\n}\n\nexport interface HearthbeatEventData extends BaseEventData {\n    timestamp: number;\n}\n","import * as colors from 'colors/safe';\n\nexport enum LogLevel {\n    off,\n    fatal,\n    error,\n    warning,\n    information,\n    debug,\n    verbose\n}\n\nconst logColors = {\n    [LogLevel.fatal]: colors.red,\n    [LogLevel.error]: colors.red,\n    [LogLevel.warning]: colors.yellow,\n    [LogLevel.information]: colors.blue,\n    [LogLevel.debug]: colors.cyan,\n    [LogLevel.verbose]: colors.white\n};\n\nlet logLevel: LogLevel = LogLevel.off;\n\nexport function logger(component: string) {\n    const log = (data: any, level: LogLevel) => {\n        if (level > logLevel) {\n            return;\n        }\n\n        const msg = typeof data === 'string' ? data : JSON.stringify(data);\n\n        const color = logColors[level];\n        const levelString = LogLevel[level];\n        console.log(`${color(levelString)} ${component} | ${msg}`);\n    };\n\n    return {\n        fatal(msg: any) {\n            log(msg, LogLevel.fatal);\n        },\n        error(msg: any) {\n            log(msg, LogLevel.error);\n        },\n        warning(msg: any) {\n            log(msg, LogLevel.warning);\n        },\n        information(msg: any) {\n            log(msg, LogLevel.information);\n        },\n        debug(msg: any) {\n            log(msg, LogLevel.debug);\n        },\n        verbose(msg: any) {\n            log(msg, LogLevel.verbose);\n        }\n    };\n}\n\nexport function configure({ level }: { level: LogLevel }) {\n    logLevel = level;\n}\n","import { Socket } from './Socket';\nimport {\n    OperationEventData,\n    EventOperation,\n    EventOperationGet,\n    EventOperationInsert,\n    EventOperationUpdate,\n    EventOperationDelete\n} from './EventData';\nimport {\n    ClientOperationSet,\n    ClientOperationDelete,\n    ClientOperationGet\n} from './ClientData';\n\nexport class Reference {\n    private path: string[];\n    private socket: Socket;\n\n    constructor(path: string[], socket: Socket) {\n        this.path = path;\n        this.socket = socket;\n    }\n\n    async value(): Promise<any> {\n        const data = await this.socket.sendWait(\n            {\n                operation: ClientOperationGet,\n                path: this.path\n            },\n            this.path,\n            EventOperationGet\n        );\n        return data.value;\n    }\n\n    data(callback: (data: OperationEventData) => any): () => any {\n        const offCallbacks = [\n            this.on(EventOperationInsert, callback),\n            this.on(EventOperationUpdate, callback),\n            this.on(EventOperationDelete, callback)\n        ];\n\n        return () => offCallbacks.forEach(f => f());\n    }\n\n    on(\n        op: EventOperation,\n        callback: (data: OperationEventData) => any\n    ): () => any {\n        return this.socket.subscribe(this.path, op, 0, callback);\n    }\n\n    once(op: EventOperation, callback: (data: OperationEventData) => any) {\n        this.socket.subscribeOnce(this.path, op, 0, callback);\n    }\n\n    async set(value: any): Promise<OperationEventData> {\n        const data = await this.socket.sendWait(\n            {\n                operation: ClientOperationSet,\n                path: this.path,\n                value: value\n            },\n            this.path,\n            [EventOperationInsert, EventOperationUpdate]\n        );\n\n        return data;\n    }\n\n    async delete(): Promise<OperationEventData> {\n        const data = await this.socket.sendWait(\n            {\n                operation: ClientOperationDelete,\n                path: this.path\n            },\n            this.path,\n            EventOperationDelete\n        );\n        return data;\n    }\n}\n"]}